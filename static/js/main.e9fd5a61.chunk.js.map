{"version":3,"sources":["components/Notification/Notification.js","components/Statistics/Statistics.js","components/Feedback-options/Feedback-options.js","components/Section/Section.js","App.js","index.js","components/Statistics/Statistics.module.css","components/Feedback-options/Feedback-options.module.css"],"names":["Notification","message","defaultProps","Statistics","options","total","positivePercentage","className","styles","wrap","list","map","el","FeedbackOptions","onLeaveFeedback","option","type","name","onClick","button","Section","heading","children","App","state","good","neutral","bad","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","percentage","Math","ceil","handleLeaveFeedback","event","currentTarget","setState","prevState","keys","this","entries","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"gPAGMA,EAAe,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACjB,mCACI,4BAAIA,OAIZD,EAAaE,aAAe,CACxBD,QAAS,IAOED,Q,gBCZTG,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,mBAAnB,OACf,qCACI,2CACCD,EAEO,sBAAKE,UAAWC,IAAOC,KAAvB,UACI,oBAAIF,UAAWC,IAAOE,KAAtB,SACKN,EAAQO,KAAI,SAAAC,GAAE,OACX,+BAAiBA,EAAG,GAApB,KAA0BA,EAAG,KAApBA,EAAG,SAIpB,wCAAWP,KACX,oDAAuBC,EAAvB,UAGN,cAAC,EAAD,CAAcL,QAAQ,0BAKpCE,EAAWD,aAAe,CACtBE,QAAS,GACTC,MAAO,EACPC,mBAAoB,GASTH,Q,gBClCTU,EAAkB,SAAC,GAAD,IAAGT,EAAH,EAAGA,QAASU,EAAZ,EAAYA,gBAAZ,OACpB,mCACKV,EAAQO,KAAI,SAAAI,GAAM,OACf,wBACIC,KAAK,SAELC,KAAMF,EACNG,QAASJ,EACTP,UAAWC,IAAOW,OALtB,SAOKJ,GALIA,SAUrBF,EAAgBX,aAAe,CAC3BE,QAAS,IAQES,QCzBTO,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACZ,oCACI,6BAAKD,IACJC,MAITF,EAAQlB,aAAe,CACnBmB,QAAS,IAOED,QCmCAG,G,kNA9CXC,MAAQ,CACJC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGTC,mBAAqB,WAIjB,OAHsBC,OAAOC,OAAO,EAAKN,OAEbO,QAAO,SAACC,EAAKpB,GAAN,OAAaoB,EAAMpB,M,EAI1DqB,gCAAkC,WAAO,IAE/BC,EAAoB,IADT,EAAKV,MAAdC,KACwB,EAAKG,qBACrC,OAAOO,KAAKC,KAAKF,I,EAGrBG,oBAAsB,SAACC,GAAW,IACtBrB,EAASqB,EAAMC,cAAftB,KACR,EAAKuB,UAAS,SAAAC,GAAS,sBAAQxB,EAAOwB,EAAUxB,GAAQ,O,4CAG5D,WACI,OACI,qBAAKV,UAAU,YAAf,SACI,eAAC,EAAD,CAASc,QAAQ,wBAAjB,UACI,cAAC,EAAD,CACIjB,QAASyB,OAAOa,KAAKC,KAAKnB,OAC1BV,gBAAiB6B,KAAKN,sBAG1B,cAAC,EAAD,CACIjC,QAASyB,OAAOe,QAAQD,KAAKnB,OAC7BnB,MAAOsC,KAAKf,qBACZtB,mBAAoBqC,KAAKV,6C,GArC/BY,cCDlBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,U,kBCR5BC,EAAOC,QAAU,CAAC,KAAO,yBAAyB,KAAO,2B,kBCAzDD,EAAOC,QAAU,CAAC,OAAS,oC","file":"static/js/main.e9fd5a61.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({message}) => (\n    <>\n        <p>{message}</p>\n    </>\n);\n\nNotification.defaultProps = {\n    message: ''\n};\n\nNotification.propTypes = {\n    message: PropTypes.string.isRequired\n};\n\nexport default Notification;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Notification from '../Notification';\nimport styles from './Statistics.module.css'\n\nconst Statistics = ({ options, total, positivePercentage }) => (\n    <>\n        <h2>Statistic</h2>\n        {total ?\n            (\n                <div className={styles.wrap}>\n                    <ul className={styles.list}>\n                        {options.map(el => (\n                            <li key={el[0]}>{el[0]}: {el[1]}</li>\n                        ))}\n                    </ul>\n        \n                    <p>Total: {total}</p>\n                    <p>Positive feetback: {positivePercentage}%</p>\n                </div>\n            )\n            : <Notification message=\"No feedback given\" />\n        }\n    </>\n);\n\nStatistics.defaultProps = {\n    options: [],\n    total: 0,\n    positivePercentage: 0,\n};\n\nStatistics.propTypes = {\n    options: PropTypes.arrayOf(PropTypes.array).isRequired,\n    total: PropTypes.number.isRequired,\n    positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Feedback-options.module.css';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n    <>\n        {options.map(option => (\n            <button\n                type=\"button\"\n                key={option}\n                name={option}\n                onClick={onLeaveFeedback}\n                className={styles.button}\n            >\n                {option}</button>\n        ))}\n    </>\n);\n\nFeedbackOptions.defaultProps = {\n    options: []\n};\n\nFeedbackOptions.propTypes = {\n    options: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onLeaveFeedback: PropTypes.func\n};\n\nexport default FeedbackOptions;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ heading ,children }) => (\n    <section>\n        <h2>{heading}</h2>\n        {children}\n    </section>\n);\n\nSection.defaultProps = {\n    heading: ''\n};\n\nSection.propTypes = {\n    heading: PropTypes.string.isRequired,\n};\n\nexport default Section;\n\n","import React, { Component } from 'react';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/Feedback-options';\nimport Section from './components/Section';\nimport './styles.css';\n\nclass App extends Component {\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n    };\n\n    countTotalFeedback = () => {\n        const arrStateValue = Object.values(this.state);\n        \n        const total = arrStateValue.reduce((acc, el) => acc + el);\n        return total;\n    };\n\n    countPositiveFeedbackPercentage = () => {\n        const { good } = this.state;\n        const percentage = good * 100 / this.countTotalFeedback();\n        return Math.ceil(percentage);\n    };\n\n    handleLeaveFeedback = (event) => {\n        const { name } = event.currentTarget;\n        this.setState(prevState => ({ [name]: prevState[name] + 1 }))\n    };\n\n    render() {\n        return (\n            <div className=\"container\">\n                <Section heading=\"Please leave feedback\">\n                    <FeedbackOptions\n                        options={Object.keys(this.state)}\n                        onLeaveFeedback={this.handleLeaveFeedback}\n                    />\n                    \n                    <Statistics\n                        options={Object.entries(this.state)}\n                        total={this.countTotalFeedback()}\n                        positivePercentage={this.countPositiveFeedbackPercentage()}\n                    />\n                </Section>\n            </div>\n        )\n    };\n};\n\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';    \n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3oKT7\",\"wrap\":\"Statistics_wrap__1eluO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Feedback-options_button__RjnHl\"};"],"sourceRoot":""}